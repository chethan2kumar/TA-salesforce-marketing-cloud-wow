{"basic_builder": {"appname": "TA-salesforce-marketing-cloud-wow", "friendly_name": "Salesforce Marketing Cloud WOW", "version": "1.0.0", "author": "", "description": "", "theme": "#38b8bf", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAxJJREFUWEftmIlOIlEQRQtxQVwQcEk0uIAC//81gIioEeK+ICBqYHIqU+QJCE0PcYjxJSa2TXfduksVMSBTdgJThkemG1Aul+v8D8ay2WyXmE8M/QL6K8fPZmhxcVE6nY7MzMzIx8eHvL29jW1D3wwFg0FJpVLSarWk0WhILBaTWq0mlUpFQezs7Mjy8rLc3d0JQPkpFovSbreHgvQNaG1tTZ6enpQRLwfWlpaWFPSw4xvQ4eGhnJycKKBAICBbW1sSiUS6tWDi+vpaQXMAdHBwoM9MDBAyraysyPr6utLP2dvbk3q9Lre3t311AAoIgL28vOh9ZL6/v5fHx8eB7I7FUDqdluPjY30xzGQyGcnn83p9dHSkRj49PdXr7e1tCYfDUiqVVCr8VK1WlSnY4/P2LreTsQDBxtnZWReAvXB+fl4BJhIJBcAxsMiIbDDLMQ/t7+9LuVzuY3UsQBsbG3Jzc6PdEmmLtRdAVEY+Y5BUIl3vGQuQde1KFY1GBUC8HIaen5+1RjweVzmJf7PZ1Pt4inQ+PDx8ktuXZMwRijNnNjc31agwhpm9RH93d1fOz88FHxYKBQUP26+vr59I8sxQKBTShzHlwsKCdg1AuvVyMDnNGCCewewk1BdDJIaJTPRnZ2d1QgMOoPx92HE/x/yykYHRewelZ4bwCRJdXl7qALSBZ50PA+Qyaf5DQsbA+/u7P4bcKCeTyb54DwPkpguT05QbDF+S8RATGhO7rHw1T9wiVhymbEJ/5T/PklGAZFxcXGgt6xpvMXl702KA8BwSE3uXKXfI+maIhJgh8RSmJLr4AWPTPeuDMzc3pykCDNPd0gVAGsDc/7w67CsEc4itTcLY8rZOXAbN+CQSzzF7jFm+I5GuQfNrLMlcatnarAG6BQiFkY3kcGAPr11dXSlzMAOTtjq+CoFvQINMabuOYqurq901wjVrA5C2WiYOiAL4gDlCEcDwu217ZMJHrBjA4Tn8N2rN+GZoUId4CmnwGvL1Dj0vK2aigLwUHPWZX0A/h6FRnXzH/en+/9B3MDCqxh9YRC5DRODzCQAAAABJRU5ErkJggg==", "visible": true, "tab_version": "4.1.3", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "sfmc:security:json", "interval": "600", "use_external_validation": true, "streaming_mode_xml": true, "name": "sfmc_events", "title": "SFMC Events", "description": "Input for SFMC", "type": "customized", "parameters": [{"name": "auth_api_url", "label": "Auth API URL", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": ""}, {"name": "rest_api_url", "label": "REST API URL", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": ""}, {"name": "global_account", "label": "Global Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}], "data_inputs_options": [{"type": "customized_var", "name": "auth_api_url", "title": "Auth API URL", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "rest_api_url", "title": "REST API URL", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "global_account", "title": "Global Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}], "code": "# encoding = utf-8\n\n\n\nimport os\n\n\n\nimport sys\n\n\n\nimport time\n\n\n\nimport datetime\n\n\n\nimport json\n\n\n\nimport requests\n\n\n\nfrom urllib.parse import urljoin, urlparse\n\n\n\n\n\n'''\n\n\n\n    IMPORTANT\n\n\n\n    Edit only the validate_input and collect_events functions.\n\n\n\n    Do not edit any other part in this file.\n\n\n\n    This file is generated only once when creating the modular input.\n\n\n\n'''\n\n\n\n\n\n'''\n\n\n\n# For advanced users, if you want to create single instance mod input, uncomment this method.\n\n\n\ndef use_single_instance_mode():\n\n\n\n    return True\n\n\n\n'''\n\n\n\n\n\ndate_format_str = '%Y-%m-%dT%H:%M:%S'\n\n\n\n\n\ndef validate_input(helper, definition):\n\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n\n\n\n    pass\n\n\n\n\n\ndef uri_validator(url):\n\n\n\n    try:\n\n\n\n        result = urlparse(url)\n\n\n\n        return all([result.scheme, result.netloc])\n\n\n\n    except:\n\n\n\n        return False\n\n\n\n\n\ndef get_sfmc_url(host_url, path):\n\n\n\n    if uri_validator(host_url):\n\n\n\n        url = urljoin(host_url, path)\n\n\n\n        return urlparse(url)._replace(scheme=\"https\").geturl()\n\n\n\n    else:\n\n\n\n        raise ValueError(\"URL format error\")\n\n\n\n\n\ndef collect_events(helper, ew):\n\n\n\n    # get Credentials\n\n\n\n    global_account = helper.get_arg('global_account')\n\n\n\n    client_Id = global_account['username']\n\n\n\n    client_Secret = global_account['password']\n\n\n\n    payload = {'client_id': client_Id, 'client_secret': client_Secret,\n\n               'grant_type': 'client_credentials'}\n\n\n\n    url = get_sfmc_url(helper.get_arg(\"auth_api_url\"), \"/v2/token\")\n\n\n\n    auth_resp = requests.post(url, data=payload)\n\n\n\n    resp = auth_resp.json()\n\n\n\n    if auth_resp.status_code == 200:\n\n\n\n        token = resp['access_token']\n\n\n\n        expiresIn = resp['expires_in']\n\n\n\n        auth_token_header_value = \"Bearer %s\" % token\n\n\n\n        auth_token_header = {\"Authorization\": auth_token_header_value}\n\n\n\n    else:\n\n\n\n        raise Exception(\n\n            f\"Failed to get Auth token, status_code={resp.status_code}\")\n\n\n\n    # Security Events URL\n\n\n\n    security_events_path = \"/data/v1/audit/securityEvents\"\n\n\n\n    security_events_url = get_sfmc_url(\n\n        helper.get_arg(\"rest_api_url\"), security_events_path)\n\n\n\n    security_sourcetype = \"sfmc:security:json\"\n\n\n\n    # Security Events Checkpoint\n\n\n\n    sec_checkpoint_name = \"sfmc_security_events_checkpoint\"\n\n\n\n    helper.log_info('checkpoint name: ' + sec_checkpoint_name)\n\n\n\n    # helper.delete_check_point(sec_checkpoint_name)\n\n\n\n    # Audit Events URL\n\n\n\n    audit_events_path = \"/data/v1/audit/auditEvents\"\n\n\n\n    audit_events_url = get_sfmc_url(\n\n        helper.get_arg(\"rest_api_url\"), audit_events_path)\n\n\n\n    audit_sourcetype = \"sfmc:audit:json\"\n\n\n\n    # Audit Events Checkpoint\n\n\n\n    audit_checkpoint_name = \"sfmc_audit_events_checkpoint\"\n\n\n\n    helper.log_info('checkpoint name: ' + audit_checkpoint_name)\n\n\n\n    # helper.delete_check_point(audit_checkpoint_name)\n\n\n\n    get_sfmc_events(helper, auth_token_header, security_events_url,\n\n                    sec_checkpoint_name, ew, security_sourcetype)\n\n\n\n    get_sfmc_events(helper, auth_token_header, audit_events_url,\n\n                    audit_checkpoint_name, ew, audit_sourcetype)\n\n\n\n\n\ndef get_sfmc_events(helper, header, url, checkpoint_name, ew, sourcetype):\n\n\n\n    # Yest date time in UTC\n    date_yest = datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(days=1)\n    \n\n\n    date_yest = date_yest.strftime(date_format_str)\n\n\n\n    checkpoint = helper.get_check_point(checkpoint_name)\n\n\n\n    if checkpoint is None:\n\n\n\n        helper.log_info('set first checkpoint: ' + date_yest)\n\n\n\n        helper.save_check_point(checkpoint_name, date_yest)\n\n\n\n        checkpoint = date_yest\n\n\n\n    helper.log_info('current checkpoint: ' +\n\n                    checkpoint_name+'::' + str(checkpoint))\n\n\n\n    r_parameters = {'$page': 1, '$pageSize': 100,\n\n                    '$orderby': 'createdDate desc', 'startdate': checkpoint}\n\n\n\n    sfmc_events_response = requests.get(\n\n        url, headers=header, params=r_parameters)\n\n\n\n    sfmc_events_resp_json = sfmc_events_response.json()\n\n\n\n    sfmc_events_resp_status_code = sfmc_events_response.status_code\n\n\n\n    is_error = 1\n\n\n\n    is_zero = 1\n\n\n\n    next_checkpoint = checkpoint\n\n\n\n    if sfmc_events_resp_status_code == 200:\n\n\n\n        is_error = 0\n\n\n\n        num_of_pages = 1\n\n\n\n        if sfmc_events_resp_json['count'] > 0:\n\n\n\n            is_zero = 0\n\n\n\n            record_count = sfmc_events_resp_json['count']\n\n\n\n            page_size = sfmc_events_resp_json['pageSize']\n\n\n\n            num_of_pages = record_count / page_size\n\n\n\n            next_checkpoint = sfmc_events_resp_json['items'][0]['createdDate']\n\n\n\n            helper.log_info('record_count: ' + str(record_count) + ' page_size: '+str(page_size)+' num_of_pages:' +\n\n                            str(num_of_pages)+' cur_checkpoint:'+str(checkpoint)+' next_Checkpoint:'+str(next_checkpoint))\n\n\n\n            if (checkpoint != next_checkpoint):\n\n\n\n                # write events from first page to splunk\n\n\n\n                for item in sfmc_events_resp_json['items']:\n\n\n\n                    evt = helper.new_event(json.dumps(item), time=None, host=None, index=None,\n\n                                           source=None, sourcetype=sourcetype, done=True, unbroken=True)\n\n\n\n                    ew.write_event(evt)\n\n\n\n        else:\n\n\n\n            helper.log_info(\"Record Count is Zero\")\n\n\n\n    if not is_error:\n\n\n\n        page = 2\n\n\n\n        if not is_zero:\n\n\n\n            try:\n\n\n\n                while (page <= (num_of_pages+1)):  # while(page<=(num_of_pages+1)):\n\n\n\n                    helper.log_info('page::'+str(page) +\n\n                                    ' num_of_pages::'+str(num_of_pages))\n\n\n\n                    r_parameters = {\n\n\n\n                        '$page': page,\n\n\n\n                        '$pageSize': 100,\n\n\n\n                        '$orderby': 'createdDate desc',\n\n\n\n                        'startdate': checkpoint\n\n\n\n                    }\n\n\n\n                    sfmc_events_response = requests.get(\n\n                        url, headers=header, params=r_parameters)\n\n\n\n                    sfmc_events_resp_json = sfmc_events_response.json()\n\n\n\n                    sfmc_events_resp_status_code = sfmc_events_response.status_code\n\n\n\n                    if sfmc_events_resp_status_code == 200:\n\n\n\n                        for item in sfmc_events_resp_json['items']:\n\n\n\n                            evt = helper.new_event(json.dumps(\n\n                                item), time=None, host=None, index=None, source=None, sourcetype=sourcetype, done=True, unbroken=True)\n\n\n\n                            ew.write_event(evt)\n\n\n\n                    page = page+1\n\n\n\n            except Exception as e:\n\n\n\n                helper.log_error(\n\n                    \"Problem while making a call to SFMC API: \" + str(e))\n\n\n\n            helper.save_check_point(checkpoint_name, next_checkpoint)\n\n\n\n    else:\n\n\n\n        helper.log_error(\n\n            \"Recieved error response from the API call: \" + str(sfmc_events_resp_json))\n\n", "customized_options": [{"name": "auth_api_url", "value": ""}, {"name": "rest_api_url", "value": ""}, {"name": "global_account", "value": "account0"}], "uuid": "0b7e19e05ee34816bc2cabbd97a71652", "sample_count": "1231843"}]}, "field_extraction_builder": {"sfmc:security:json": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"sfmc:security:json": {"metadata": {"event_count": 0, "data_input_name": "sfmc_events", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1686892248_10", "progress": 1.0}}